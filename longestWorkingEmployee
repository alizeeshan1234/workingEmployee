use std::collections::HashSet;

fn longest_working_employee(hours : Vec<Vec<u8>>) -> u8 {
    let mut longest_working = Vec::new();

    for i in hours {
        longest_working.push(longest_period(i));
    }

    for i in 0..longest_working.len() {
        println!("Employee Number {} has worked nonstop for {} slots" , i , longest_working[i]);
    }

    let max_val = longest_working.iter().max();
    longest_working.iter().position(|x| *x == *max_val.unwrap()).unwrap() as u8
}

fn longest_period(working_slot : Vec<u8>) -> u8 {
    let mut longest_period = 0;
    let mut slot_set : HashSet<_> = working_slot.into_iter().collect();

    for slot in &slot_set {
        if !slot_set.contains(&(slot - 1)) {
            let mut current_slot = slot.clone();
            let mut current_consecutive_slot = 1;
            while slot_set.contains(&(&current_slot + 1)) {
                current_slot += 1;
                current_consecutive_slot += 1;
            }
            if current_consecutive_slot > longest_period {
                longest_period = current_consecutive_slot;
            }
        }
    }

    return longest_period;
}

fn main() {
    let working_hours = vec![
        vec![1,2,3,4,6,7,9],
        vec![1,2,3,4,5,6,7,8,9],
        vec![1,2,3,8,9],
    ];

    longest_working_employee(working_hours);
}
